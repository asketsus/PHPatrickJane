<?php

$arraylist = array( "array_change_key_case" => "Changes the case of all keys in an array",
					"array_chunk" => "Split an array into chunks",
					"array_column" => "Return the values from a single column in the input array",
					"array_combine" => "Creates an array by using one array for keys and another for its values",
					"array_count_values" => "Counts all the values of an array",
					"array_diff_assoc" => "Computes the difference of arrays with additional index check",
					"array_diff_key" => "Computes the difference of arrays using keys for comparison",
					"array_diff_uassoc" => "Computes the difference of arrays with additional index check which is performed by a user supplied callback function",
					"array_diff_ukey" => "Computes the difference of arrays using a callback function on the keys for comparison",
					"array_diff" => "Computes the difference of arrays",
					"array_fill_keys" => "Fill an array with values, specifying keys",
					"array_fill" => "Fill an array with values",
					"array_filter" => "Filters elements of an array using a callback function",
					"array_flip" => "Exchanges all keys with their associated values in an array",
					"array_intersect_assoc" => "Computes the intersection of arrays with additional index check",
					"array_intersect_key" => "Computes the intersection of arrays using keys for comparison",
					"array_intersect_uassoc" => "Computes the intersection of arrays with additional index check, compares indexes by a callback function",
					"array_intersect_ukey" => "Computes the intersection of arrays using a callback function on the keys for comparison",
					"array_intersect" => "Computes the intersection of arrays",
					"array_key_exists" => "Checks if the given key or index exists in the array",
					"array_keys" => "Return all the keys or a subset of the keys of an array",
					"array_map" => "Applies the callback to the elements of the given arrays",
					"array_merge_recursive" => "Merge two or more arrays recursively",
					"array_merge" => "Merge one or more arrays",
					"array_multisort" => "Sort multiple or multi-dimensional arrays",
					"array_pad" => "Pad array to the specified length with a value",
					"array_pop" => "Pop the element off the end of array",
					"array_product" => "Calculate the product of values in an array",
					"array_push" => "Push one or more elements onto the end of array",
					"array_rand" => "Pick one or more random entries out of an array",
					"array_reduce" => "Iteratively reduce the array to a single value using a callback function",
					"array_replace_recursive" => "Replaces elements from passed arrays into the first array recursively",
					"array_replace" => "Replaces elements from passed arrays into the first array",
					"array_reverse" => "Return an array with elements in reverse order",
					"array_search" => "Searches the array for a given value and returns the corresponding key if successful",
					"array_shift" => "Shift an element off the beginning of array",
					"array_slice" => "Extract a slice of the array",
					"array_splice" => "Remove a portion of the array and replace it with something else",
					"array_sum" => "Calculate the sum of values in an array",
					"array_udiff_assoc" => "Computes the difference of arrays with additional index check, compares data by a callback function",
					"array_udiff_uassoc" => "Computes the difference of arrays with additional index check, compares data and indexes by a callback function",
					"array_udiff" => "Computes the difference of arrays by using a callback function for data comparison",
					"array_uintersect_assoc" => "Computes the intersection of arrays with additional index check, compares data by a callback function",
					"array_uintersect_uassoc" => "Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions",
					"array_uintersect" => "Computes the intersection of arrays, compares data by a callback function",
					"array_unique" => "Removes duplicate values from an array",
					"array_unshift" => "Prepend one or more elements to the beginning of an array",
					"array_values" => "Return all the values of an array",
					"array_walk_recursive" => "Apply a user function recursively to every member of an array",
					"array_walk" => "Apply a user function to every member of an array",
					"array" => "Create an array",
					"arsort" => "Sort an array in reverse order and maintain index association",
					"asort" => "Sort an array and maintain index association",
					"compact" => "Create array containing variables and their values",
					"count" => "Count all elements in an array, or something in an object",
					"current" => "Return the current element in an array",
					"each" => "Return the current key and value pair from an array and advance the array cursor",
					"end" => "Set the internal pointer of an array to its last element",
					"extract" => "Import variables into the current symbol table from an array",
					"in_array" => "Checks if a value exists in an array",
					"key_exists" => "Alias of array_key_exists",
					"key" => "Fetch a key from an array",
					"krsort" => "Sort an array by key in reverse order",
					"ksort" => "Sort an array by key",
					"list" => "Assign variables as if they were an array",
					"natcasesort" => "Sort an array using a case insensitive 'natural order' algorithm",
					"natsort" => "Sort an array using a 'natural order' algorithm",
					"next" => "Advance the internal array pointer of an array",
					"pos" => "Alias of current",
					"prev" => "Rewind the internal array pointer",
					"range" => "Create an array containing a range of elements",
					"reset" => "Set the internal pointer of an array to its first element",
					"rsort" => "Sort an array in reverse order",
					"shuffle" => "Shuffle an array",
					"sizeof" => "Alias of count",
					"sort" => "Sort an array",
					"uasort" => "Sort an array with a user-defined comparison function and maintain index association",
					"uksort" => "Sort an array by keys using a user-defined comparison function",
					"usort" => "Sort an array by values using a user-defined comparison function");

$stringlist = array("addcslashes" => "Quote string with slashes in a C style",
					"addslashes" => "Quote string with slashes",
					"bin2hex" => "Convert binary data into hexadecimal representation",
					"chop" => "Alias of rtrim",
					"chr" => "Return a specific character",
					"chunk_split" => "Split a string into smaller chunks",
					#"convert_cyr_string" => "Convert from one Cyrillic character set to another",
					"convert_uudecode" => "Decode a uuencoded string",
					"convert_uuencode" => "Uuencode a string",
					"count_chars" => "Return information about characters used in a string",
					"crc32" => "Calculates the crc32 polynomial of a string",
					"crypt" => "One-way string hashing",
					"echo" => "Output one or more strings",
					"explode" => "Split a string by string",
					"fprintf" => "Write a formatted string to a stream (1)",
					"get_html_translation_table" => "Returns the translation table used by htmlspecialchars and htmlentities",
					#"hebrev" => "Convert logical Hebrew text to visual text",
					#"hebrevc" => "Convert logical Hebrew text to visual text with newline conversion",
					"hex2bin" => "Decodes a hexadecimally encoded binary string",
					"html_entity_decode" => "Convert all HTML entities to their applicable characters",
					"htmlentities" => "Convert all applicable characters to HTML entities",
					"htmlspecialchars_decode" => "Convert special HTML entities back to characters",
					"htmlspecialchars" => "Convert special characters to HTML entities",
					"implode" => "Join array elements with a string",
					"join" => "Alias of implode",
					"lcfirst" => "Make a string's first character lowercase",
					"levenshtein" => "Calculate Levenshtein distance between two strings",
					"localeconv" => "Get numeric formatting information",
					"ltrim" => "Strip whitespace (or other characters) from the beginning of a string",
					"md5_file" => "Calculates the md5 hash of a given file",
					"md5" => "Calculate the md5 hash of a string",
					"metaphone" => "Calculate the metaphone key of a string",
					"money_format" => "Formats a number as a currency string",
					"nl_langinfo" => "Query language and locale information",
					"nl2br" => "Inserts HTML line breaks before all newlines in a string",
					"number_format" => "Format a number with grouped thousands",
					"ord" => "Return ASCII value of character",
					"parse_str" => "Parses the string into variables",
					"print" => "Output a string",
					"printf" => "Output a formatted string (1)",
					#"quoted_printable_decode" => "Convert a quoted-printable string to an 8 bit string",
					#"quoted_printable_encode" => "Convert a 8 bit string to a quoted-printable string",
					"quotemeta" => "Quote meta characters",
					"rtrim" => "Strip whitespace (or other characters) from the end of a string",
					"setlocale" => "Set locale information",
					"sha1_file" => "Calculate the sha1 hash of a file",
					"sha1" => "Calculate the sha1 hash of a string",
					"similar_text" => "Calculate the similarity between two strings",
					"soundex" => "Calculate the soundex key of a string",
					"sprintf" => "Return a formatted string (1)",
					"sscanf" => "Parses input from a string according to a format",
					"str_getcsv" => "Parse a CSV string into an array",
					"str_ireplace" => "Case-insensitive version of str_replace.",
					"str_pad" => "Pad a string to a certain length with another string",
					"str_repeat" => "Repeat a string",
					"str_replace" => "Replace all occurrences of the search string with the replacement string",
					"str_rot13" => "Perform the rot13 transform on a string",
					"str_shuffle" => "Randomly shuffles a string",
					"str_split" => "Convert a string to an array",
					"str_word_count" => "Return information about words used in a string",
					"strcasecmp" => "Binary safe case-insensitive string comparison",
					"strchr" => "Alias of strstr",
					"strcmp" => "Binary safe string comparison",
					"strcoll" => "Locale based string comparison",
					"strcspn" => "Find length of initial segment not matching mask",
					"strip_tags" => "Strip HTML and PHP tags from a string",
					"stripcslashes" => "Un-quote string quoted with addcslashes",
					"stripos" => "Find the position of the first occurrence of a case-insensitive substring in a string",
					"stripslashes" => "Un-quotes a quoted string",
					"stristr" => "Case-insensitive strstr",
					"strlen" => "Get string length",
					"strnatcasecmp" => "Case insensitive string comparisons using a natural order algorithm",
					"strnatcmp" => "String comparisons using a natural order algorithm",
					"strncasecmp" => "Binary safe case-insensitive string comparison of the first n characters",
					"strncmp" => "Binary safe string comparison of the first n characters",
					"strpbrk" => "Search a string for any of a set of characters",
					"strpos" => "Find the position of the first occurrence of a substring in a string",
					"strrchr" => "Find the last occurrence of a character in a string",
					"strrev" => "Reverse a string",
					"strripos" => "Find the position of the last occurrence of a case-insensitive substring in a string",
					"strrpos" => "Find the position of the last occurrence of a substring in a string",
					"strspn" => "Finds the length of the initial segment of a string consisting entirely of characters contained within a given mask.",
					"strstr" => "Find the first occurrence of a string",
					"strtok" => "Tokenize string",
					"strtolower" => "Make a string lowercase",
					"strtoupper" => "Make a string uppercase",
					"strtr" => "Translate characters or replace substrings",
					"substr_compare" => "Binary safe comparison of two strings from an offset, up to length characters",
					"substr_count" => "Count the number of substring occurrences",
					"substr_replace" => "Replace text within a portion of a string",
					"substr" => "Return part of a string",
					"trim" => "Strip whitespace (or other characters) from the beginning and end of a string",
					"ucfirst" => "Make a string's first character uppercase",
					"ucwords" => "Uppercase the first character of each word in a string",
					"vfprintf" => "Write a formatted string to a stream (2)",
					"vprintf" => "Output a formatted string (2)",
					"vsprintf" => "Return a formatted string (2)",
					"wordwrap" => "Wraps a string to a given number of characters");

$preglist = array(  "preg_filter" => "Perform a regular expression search and replace (1)",
					"preg_grep" => "Return array entries that match the pattern",
					"preg_last_error" => "Returns the error code of the last PCRE regex execution",
					"preg_match_all" => "Perform a global regular expression match",
					"preg_match" => "Perform a regular expression match",
					"preg_quote" => "Quote regular expression characters",
					"preg_replace_callback" => "Perform a regular expression search and replace using a callback",
					"preg_replace" => "Perform a regular expression search and replace (2)",
					"preg_split" => "Split string by a regular expression");

$filelist = array(  "basename" => "Returns trailing name component of path",
					"chgrp" => "Changes file group",
					"chmod" => "Changes file mode",
					"chown" => "Changes file owner",
					"clearstatcache" => "Clears file status cache",
					"copy" => "Copies file",
					"delete" => "See unlink or unset",
					"dirname" => "Returns parent directory's path",
					"disk_free_space" => "Returns available space on filesystem or disk partition",
					"disk_total_space" => "Returns the total size of a filesystem or disk partition",
					"diskfreespace" => "Alias of disk_free_space",
					"fclose" => "Closes an open file pointer",
					"feof" => "Tests for end-of-file on a file pointer",
					"fflush" => "Flushes the output to a file",
					"fgetc" => "Gets character from file pointer",
					"fgetcsv" => "Gets line from file pointer and parse for CSV fields",
					"fgets" => "Gets line from file pointer",
					"fgetss" => "Gets line from file pointer and strip HTML tags",
					"file_exists" => "Checks whether a file or directory exists",
					"file_get_contents" => "Reads entire file into a string",
					"file_put_contents" => "Write a string to a file",
					"file" => "Reads entire file into an array",
					"fileatime" => "Gets last access time of file",
					"filectime" => "Gets inode change time of file",
					"filegroup" => "Gets file group",
					"fileinode" => "Gets file inode",
					"filemtime" => "Gets file modification time",
					"fileowner" => "Gets file owner",
					"fileperms" => "Gets file permissions",
					"filesize" => "Gets file size",
					"filetype" => "Gets file type",
					"flock" => "Portable advisory file locking",
					"fnmatch" => "Match filename against a pattern",
					"fopen" => "Opens file or URL",
					"fpassthru" => "Output all remaining data on a file pointer",
					"fputcsv" => "Format line as CSV and write to file pointer",
					"fputs" => "Alias of fwrite",
					"fread" => "Binary-safe file read",
					"fscanf" => "Parses input from a file according to a format",
					"fseek" => "Seeks on a file pointer",
					"fstat" => "Gets information about a file using an open file pointer",
					"ftell" => "Returns the current position of the file read/write pointer",
					"ftruncate" => "Truncates a file to a given length",
					"fwrite" => "Binary-safe file write",
					"glob" => "Find pathnames matching a pattern",
					"is_dir" => "Tells whether the filename is a directory",
					"is_executable" => "Tells whether the filename is executable",
					"is_file" => "Tells whether the filename is a regular file",
					"is_link" => "Tells whether the filename is a symbolic link",
					"is_readable" => "Tells whether a file exists and is readable",
					"is_uploaded_file" => "Tells whether the file was uploaded via HTTP POST",
					"is_writable" => "Tells whether the filename is writable",
					"is_writeable" => "Alias of is_writable",
					"lchgrp" => "Changes group ownership of symlink",
					"lchown" => "Changes user ownership of symlink",
					"link" => "Create a hard link",
					"linkinfo" => "Gets information about a link",
					"lstat" => "Gives information about a file or symbolic link",
					"mkdir" => "Makes directory",
					"move_uploaded_file" => "Moves an uploaded file to a new location",
					"parse_ini_file" => "Parse a configuration file",
					"parse_ini_string" => "Parse a configuration string",
					"pathinfo" => "Returns information about a file path",
					"pclose" => "Closes process file pointer",
					"popen" => "Opens process file pointer",
					"readfile" => "Outputs a file",
					"readlink" => "Returns the target of a symbolic link",
					"realpath_cache_get" => "Get realpath cache entries",
					"realpath_cache_size" => "Get realpath cache size",
					"realpath" => "Returns canonicalized absolute pathname",
					"rename" => "Renames a file or directory",
					"rewind" => "Rewind the position of a file pointer",
					"rmdir" => "Removes directory",
					"set_file_buffer" => "Alias of stream_set_write_buffer",
					"stat" => "Gives information about a file",
					"symlink" => "Creates a symbolic link",
					"tempnam" => "Create file with unique file name",
					"tmpfile" => "Creates a temporary file",
					"touch" => "Sets access and modification time of file",
					"umask" => "Changes the current umask",
					"unlink" => "Deletes a file");

$streamlist = array("set_socket_blocking" => "Alias of stream_set_blocking",
					"stream_bucket_append" => "Append bucket to brigade",
					"stream_bucket_make_writeable" => "Return a bucket object from the brigade for operating on",
					"stream_bucket_new" => "Create a new bucket for use on the current stream",
					"stream_bucket_prepend" => "Prepend bucket to brigade",
					"stream_context_create" => "Creates a stream context",
					"stream_context_get_default" => "Retrieve the default stream context",
					"stream_context_get_options" => "Retrieve options for a stream/wrapper/context",
					"stream_context_get_params" => "Retrieves parameters from a context",
					"stream_context_set_default" => "Set the default stream context",
					"stream_context_set_option" => "Sets an option for a stream/wrapper/context",
					"stream_context_set_params" => "Set parameters for a stream/wrapper/context",
					"stream_copy_to_stream" => "Copies data from one stream to another",
					"stream_encoding" => "Set character set for stream encoding",
					"stream_filter_append" => "Attach a filter to a stream (1)",
					"stream_filter_prepend" => "Attach a filter to a stream (2)",
					"stream_filter_register" => "Register a user defined stream filter",
					"stream_filter_remove" => "Remove a filter from a stream",
					"stream_get_contents" => "Reads remainder of a stream into a string",
					"stream_get_filters" => "Retrieve list of registered filters",
					"stream_get_line" => "Gets line from stream resource up to a given delimiter",
					"stream_get_meta_data" => "Retrieves header/meta data from streams/file pointers",
					"stream_get_transports" => "Retrieve list of registered socket transports",
					"stream_get_wrappers" => "Retrieve list of registered streams",
					"stream_is_local" => "Checks if a stream is a local stream",
					"stream_notification_callback" => "A callback function for the notification context paramater",
					"stream_register_wrapper" => "Alias of stream_wrapper_register",
					"stream_resolve_include_path" => "Resolve filename against the include path",
					"stream_select" => "Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by tv_sec and tv_usec",
					"stream_set_blocking" => "Set blocking/non-blocking mode on a stream",
					"stream_set_chunk_size" => "Set the stream chunk size",
					"stream_set_read_buffer" => "Set read file buffering on the given stream",
					"stream_set_timeout" => "Set timeout period on a stream",
					"stream_set_write_buffer" => "Sets write file buffering on the given stream",
					"stream_socket_accept" => "Accept a connection on a socket created by stream_socket_server",
					"stream_socket_client" => "Open Internet or Unix domain socket connection",
					"stream_socket_enable_crypto" => "Turns encryption on/off on an already connected socket",
					"stream_socket_get_name" => "Retrieve the name of the local or remote sockets",
					"stream_socket_pair" => "Creates a pair of connected, indistinguishable socket streams",
					"stream_socket_recvfrom" => "Receives data from a socket, connected or not",
					"stream_socket_sendto" => "Sends a message to a socket, whether it is connected or not",
					"stream_socket_server" => "Create an Internet or Unix domain server socket",
					"stream_socket_shutdown" => "Shutdown a full-duplex connection",
					"stream_supports_lock" => "Tells whether the stream supports locking.",
					"stream_wrapper_register" => "Register a URL wrapper implemented as a PHP class",
					"stream_wrapper_restore" => "Restores a previously unregistered built-in wrapper",
					"stream_wrapper_unregister" => "Unregister a URL wrapper");

$sessionlist = array("session_cache_expire" => "Return current cache expire",
					"session_cache_limiter" => "Get and/or set the current cache limiter",
					"session_commit" => "Alias of session_write_close",
					"session_decode" => "Decodes session data from a session encoded string",
					"session_destroy" => "Destroys all data registered to a session",
					"session_encode" => "Encodes the current session data as a session encoded string",
					"session_get_cookie_params" => "Get the session cookie parameters",
					"session_id" => "Get and/or set the current session id",
					"session_is_registered" => "Find out whether a global variable is registered in a session",
					"session_module_name" => "Get and/or set the current session module",
					"session_name" => "Get and/or set the current session name",
					"session_regenerate_id" => "Update the current session id with a newly generated one",
					"session_register_shutdown" => "Session shutdown function",
					"session_register" => "Register one or more global variables with the current session",
					"session_save_path" => "Get and/or set the current session save path",
					"session_set_cookie_params" => "Set the session cookie parameters",
					"session_set_save_handler" => "Sets user-level session storage functions",
					"session_start" => "Start new or resume existing session",
					"session_status" => "Returns the current session status",
					"session_unregister" => "Unregister a global variable from the current session",
					"session_unset" => "Free all session variables",
					"session_write_close" => "Write session data and end session");

$httpcodes = array( "200" => "OK",
					"300" => "Multiple Choices",
					"301" => "Moved Permanently",
					"302" => "Found",
					"304" => "Not Modified",
					"307" => "Temporary Redirect",
					"400" => "Bad Request",
					"401" => "Unauthorized",
					"403" => "Forbidden",
					"404" => "Not Found",
					"410" => "Gone",
					"500" => "Internal Server Error",
					"501" => "Not Implemented",
					"503" => "Service Unavailable",
					"550" => "Permission denied");

$pdolist = array(   "beginTransaction" => "Initiates a transaction",
					"commit" => "Commits a transaction",
					"__construct" => "Creates a PDO instance representing a connection to a database",
					"errorCode" => "Fetch the SQLSTATE associated with the last operation on the database handle",
					"errorInfo" => "Fetch extended error information associated with the last operation on the database handle",
					"exec" => "Execute an SQL statement and return the number of affected rows",
					"getAttribute" => "Retrieve a database connection attribute",
					"getAvailableDrivers" => "Return an array of available PDO drivers",
					"inTransaction" => "Checks if inside a transaction",
					"lastInsertId" => "Returns the ID of the last inserted row or sequence value",
					"prepare" => "Prepares a statement for execution and returns a statement object",
					"query" => "Executes an SQL statement, returning a result set as a PDOStatement object",
					"quote" => "Quotes a string for use in a query.",
					"rollBack" => "Rolls back a transaction",
					"setAttribute" => "Set an attribute");

$pdostmnlist = array("bindColumn" => "Bind a column to a PHP variable",
					"bindParam" => "Binds a parameter to the specified variable name",
					"bindValue" => "Binds a value to a parameter",
					"closeCursor" => "Closes the cursor, enabling the statement to be executed again.",
					"columnCount" => "Returns the number of columns in the result set",
					"debugDumpParams" => "Dump an SQL prepared command",
					"errorCode" => "Fetch the SQLSTATE associated with the last operation on the statement handle",
					"errorInfo" => "Fetch extended error information associated with the last operation on the statement handle",
					"execute" => "Executes a prepared statement",
					"fetch" => "Fetches the next row from a result set",
					"fetchAll" => "Returns an array containing all of the result set rows",
					"fetchColumn" => "Returns a single column from the next row of a result set",
					"fetchObject" => "Fetches the next row and returns it as an object.",
					"getAttribute" => "Retrieve a statement attribute",
					"getColumnMeta" => "Returns metadata for a column in a result set",
					"nextRowset" => "Advances to the next rowset in a multi-rowset statement handle",
					"rowCount" => "Returns the number of rows affected by the last SQL statement",
					"setAttribute" => "Set a statement attribute",
					"setFetchMode" => "Set the default fetch mode for this statement");

$simplexmllist = array("addAttribute" => "Adds an attribute to the SimpleXML element",
					"addChild" => "Adds a child element to the XML node",
					"asXML" => "Return a well-formed XML string based on SimpleXML element",
					"attributes" => "Identifies an element's attributes",
					"children" => "Finds children of given node",
					"__construct" => "Creates a new SimpleXMLElement object",
					"count" => "Counts the children of an element",
					"getDocNamespaces" => "Returns namespaces declared in document",
					"getName" => "Gets the name of the XML element",
					"getNamespaces" => "Returns namespaces used in document",
					"registerXPathNamespace" => "Creates a prefix/ns context for the next XPath query",
					"saveXML" => "Alias of asXML",
					"__toString" => "Returns the string content",
					"xpath" => "Runs XPath query on XML data");

?>